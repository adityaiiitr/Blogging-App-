> inside client npm init -y
> npm install next react react-dom

    npm i antd@4.19.2 react@17.0.2 react-dom@17.0.2 next@12.1.0

> paste this in package.json

    "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
    }

> inside pages folder the sequences of folder determine

    the routing automatically using next js

> npm i antd @ant-design/icons

> Using MVC Architecture

    context - to store global accessible variables

> public folder - to store any kind of static data like images and static page css

> No Loading { Link } tag

    (react-router-dom) alternative is there in next
    import Link from 'next/link'

> No destructuring here

> adding link there is need of anchor tag also

        <Menu.Item key="setting:2">

            <Link href="/admin">
                <a>Admin</a>
            </Link>

        </Menu.Item>

> In TopNAv line 63
> {/_ we don't need to apply margin here its already applied above so it will be alligned _/}

      {/* <Menu.Item style={{marginLeft:"auto"}}> */}
        {/* <a href="https://ant.design" target="_blank" rel="noopener noreferrer">
          Navigation Four - Link
        </a> */}

> Props destructuring

    function AdminLayout(props){
        return (

            <Layout>

                <Sider>SideBar</Sider>
                <Layout>
                <Content>{props.children}</Content>
                </Layout>
            </Layout>

        );
    }

BETTER WAY AHEAD
function AdminLayout({children}){
return (

            <Layout>

                <Sider>SideBar</Sider>
                <Layout>
                <Content>{children}</Content>
                </Layout>
            </Layout>

        );
    }

> useEffect is used to display on which page you are that is text highlightiong in adminnav.js

> nextjs works in both environment so check in which you are
> process.browser // brwoser environment
> process.server // server environment
> theme="dark" = it darkens the navbar more provided by antdesign

> Backend authentication using npm package kaloraat
> npm i -g kaloraat
> "esm": "^3.2.25", using this package we can use es6 without require in package.json in backend
> sendgrid for sending forget email address
> in production we use other package instead of nodemon till then npm install nodemon inside server folder

> axios(http client) is used to send the values to the backend (Read Axios Github Documentation) or you can use the fetch method
> on successful login a message is sjown to the users using the package react-hot-toast

> data?.error or data && data.error

> create .env.local for setting the domains setup
> API=http://localhost:8000/api # this is accesible in server side only
> NEXT*PUBLIC_API=http://localhost:8000/api # this bariable is accesible in client side server (NEXT_PUBLIC*)

> Signout
> const [auth,setAuth] = useContext(AuthContext)
> const signOut =()=>{

    //remove from local storage
    localStorage.removeItem("auth")

    //remove from context
    setAuth({
      user:null,
      token:""
    })
    // redirect to login
    Router.push("/signin")

}

> Conditinal Rendering
> auth && auth.user===null or auth?.user ===null

> routes parameter structure
> router.post("/category",
> // (req,res,next)=>{
> // console.log("Perform a check to make sure user is admin")
> // console.log("Headers ",req.headers)
> // return res.status(401).send("Unauthorised")
> // // next();
> // },
> requireSignin,
> isAdmin,
> createCategory);

> Securing Routes
> Securing Pages for different user roles =- before rendering layout just check user roles and then redirect based the user based on the user specific pages like author subscriber or admin (AdminLayout.js)
